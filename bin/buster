#!/bin/bash
set -eu

buster_calculateHash() {
  echo "$(md5sum $1 | cut -d " " -f 1)"
}

BUSTER_PATH="$(realpath $(dirname $(realpath "${BASH_SOURCE[0]}"))/..)"
BUSTER_BIN=${BUSTER_PATH}/bin
BUSTER_DEPS=${BUSTER_PATH}/deps
BUSTER_OUT=${BUSTER_PATH}/out
BUSTER_SRC=${BUSTER_PATH}/src
BUSTER_TMP=${BUSTER_PATH}/tmp
BUSTER_PLATFORM="$(echo "$(uname -s)-$(uname -m)" | tr '[:upper:]' '[:lower:]' | sed 's/x86_64/x64/')"
BUSTER_NODE_VERSION=v22.12.0
BUSTER_DEPS_IDENTIFIER="${BUSTER_NODE_VERSION}-${BUSTER_PLATFORM}"
BUSTER_DEPS_PATH="${BUSTER_DEPS}/${BUSTER_DEPS_IDENTIFIER}"
BUSTER_NODE_IDENTIFIER="node-${BUSTER_NODE_VERSION}-${BUSTER_PLATFORM}"
BUSTER_NODE_BIN="${BUSTER_DEPS_PATH}/node/bin"
BUSTER_NODE_PATH="${BUSTER_NODE_BIN}/node"
BUSTER_NODE_IMPORT_FLAG="--import ${BUSTER_SRC}/loader.js"
BUSTER_NODE_MODULES_IDENTIFIER=$(buster_calculateHash "${BUSTER_PATH}/package.json")
BUSTER_NODE_MODULES_PATH="${BUSTER_DEPS_PATH}/${BUSTER_NODE_MODULES_IDENTIFIER}"
BUSTER_OUT_PATH="${BUSTER_OUT}/${BUSTER_DEPS_IDENTIFIER}-${BUSTER_NODE_MODULES_IDENTIFIER}"
BUSTER_COMMAND=$1

# Ensure deps/out and remove tmp if it exists
mkdir -p ${BUSTER_DEPS_PATH}
mkdir -p ${BUSTER_OUT_PATH}
if [ -d "${BUSTER_TMP}" ]; then
  rm -rf ${BUSTER_TMP}
fi

# Bootstrap node
if [ ! -f "${BUSTER_NODE_PATH}" ]; then
  mkdir -p ${BUSTER_TMP}
  pushd ${BUSTER_TMP} > /dev/null
  BUSTER_NODE_DOWNLOAD_URL=https://nodejs.org/dist/${BUSTER_NODE_VERSION}/${BUSTER_NODE_IDENTIFIER}.tar.gz
  if ! wget -q ${BUSTER_NODE_DOWNLOAD_URL}; then
    echo "Failed to download ${BUSTER_NODE_DOWNLOAD_URL}"
    exit
  fi
  tar xzf ${BUSTER_NODE_IDENTIFIER}.tar.gz
  rm ${BUSTER_NODE_IDENTIFIER}.tar.gz
  mv ${BUSTER_NODE_IDENTIFIER} node
  mv node ${BUSTER_DEPS_PATH}
  popd > /dev/null
  rm -rf ${BUSTER_TMP}
fi

PATH="$(dirname ${BUSTER_NODE_PATH}):${PATH}"

# Bootstrap node_modules
if [ ! -d "${BUSTER_NODE_MODULES_PATH}" ]; then
  mkdir -p ${BUSTER_TMP}
  cp ${BUSTER_PATH}/package.json ${BUSTER_TMP}
  ${BUSTER_NODE_BIN}/npm i --prefix ${BUSTER_TMP} > /dev/null
  mv ${BUSTER_TMP}/node_modules ${BUSTER_NODE_MODULES_PATH}
  rm -rf ${BUSTER_TMP}
fi

# Compiles ts files from the src folder
buster_compileSelf() {
  local hash="$(buster_calculateHash ${BUSTER_SRC}/$1)"
  local fileNameWihtoutExtension="$(basename -s .ts $1)"
  local outfile="${BUSTER_OUT_PATH}/${fileNameWihtoutExtension}-${hash}.js"
  
  if [ ! -f "${outfile}" ]; then
    ${BUSTER_NODE_MODULES_PATH}/.bin/esbuild ${BUSTER_SRC}/$1 --log-level=error --format=esm --platform=node --bundle  --sourcemap=external --outfile=${outfile}
  fi
  
  echo "$outfile"
}

buster_symlinkModules() {
  local symlinkModules="$(buster_compileSelf "symlinkModules.ts")"
  
  BUSTER_NODE_MODULES_PATH=${BUSTER_NODE_MODULES_PATH} \
    ${BUSTER_NODE_PATH} $symlinkModules $@
}

buster_init() {
  local init="$(buster_compileSelf "init.ts")"

  ${BUSTER_NODE_PATH} $init $@

  buster_symlinkModules "$@"
}

buster_check() {
  buster_symlinkModules "$@"
  
  ${BUSTER_NODE_MODULES_PATH}/.bin/tsc --noEmit $@
}

buster_run() {
  local importFlag="--import $(buster_compileSelf "node-register.ts")"
  local hooksPath="$(buster_compileSelf "node-hooks.ts")"
  
  BUSTER_NODE_HOOKS_PATH=${hooksPath} \
  BUSTER_NODE_MODULES_PATH=${BUSTER_NODE_MODULES_PATH} \
    ${BUSTER_NODE_PATH} ${importFlag} $@
}

case $BUSTER_COMMAND in
  "init") buster_init "${@:2}" ;;
  "check") buster_check "${@:2}" ;;
  "symlinkModules") buster_symlinkModules "${@:2}" ;;
  "run") buster_run "${@:2}" ;;
  *) buster_run "$@" ;;
esac

